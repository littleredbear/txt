
数据结构：数据和数据之间的联系组成了数据结构。假设D表示数据。S表示联系。那么DS={D,S}表示数据结构。

关系表：
	表中的行被看作是文件中的记录，表中的列被看作是这些记录的字段。

实体与联系：
	眼下已有的工程；在这些工程中所使用的零件。提供零件的供应商。存储零件的仓库。等等。除了基本实体本身（供应商，零件等），还有连接这些基本实体的联系。例如。供应商供应某些零件。反过来，每个零件都由某些供应商提供。

	表中的大部分联系是涉及两个表的，也就是而元关系。涉及三个实体类型，是一个三元关系。这个三元关系表示某些供应商为某些工程供应某些零件。和下面三个二元关系的联合是不同的，即“供应商供应零件”，“零件用于工程”，“工程由供应商供应”。
	例子：a。史密斯给曼哈顿工程提供活动扳手。
		  b。史密斯供应活动扳手。
		  c。活动扳手用于曼哈顿工程。
		  d。曼哈顿工程由史密斯供应。
	即。不能由b,c,d。推出a。
通常只把联系当作一种特殊的实体。

属性：
	实体是具有有用信息的对象。实体（包括联系）具有属性。属性记录实体的相应信息。

数据和数据模型：
	将数据转换成符号语言记录。对符号进行操作。
	数据模型是对对象，操作等的一个抽象的自包含的逻辑定义，这些定义合起来构成了一个面对用户的抽象机。其中对象可以用来建模数据结构。操作符用于建模一些行为。

在数据库系统中，应尽可能避免应用程序依赖于数据的情况。

存储字段：
	简言之，就是存储数据的最小单位。数据库中对每一种类型的存储字段都包含许多具体值。例如，包含不同类型零件信息的数据库可能包括称为零件数目的存储字段类型，那么对每种零件，即有一个该存储字段的具体值。

存储记录:
	存储记录是相关的存储字段的集合。

存储文件是由现存的一种类型的存储记录的值组成。
存储文件的结构: 一指定的存储文件可以各种方式实现其存储。例如，它可以完全存储在单个的存储设备上，或者存储在几个设备上。

关系系统：
	1)数据以表的形式呈现给用户；
	2)提供给用户的操作以表为操作对象。

1.二元联系：			涉及两个表的联系
2.命令驱动界面：		使用查询语言命令与数据库交互的界面	
3.并发访问:				不用用户可以同时访问同一数据
4.数据管理:				利用计算机硬件和软件技术对数据进行有效的收集，存储，处理和应用的过程
5.数据库:				数据库是一个持久数据的集合，这些数据用于某企业的应用系统中
6.数据库系统:			用计算机存储记录的系统。包括数据，硬件，软件和用户
7.数据独立性:			数据独立性包括物理独立性和逻辑独立性。应用程序不会因物理表示和访问技术的改变而改变。
8.数据库管理系统:		处理访问数据库的请求。
9.数据库管理员:			负责执行数据管理员的决定的技术人员
10.实体:				数据库中表示的任何可区分的事物,具有有用信息的对象。
11.实体/联系图:			除了基本实体本身，还有连接这些基本实体的联系。这些联系通过菱形和连线表示。
12.表格驱动界面:		通过选择菜单中的一项或填充表格中的一栏来管理数据库的界面
13.集成:				数据库可以被当作几个不同文件的合并。
14.完整性:				确保数据库中的数据是正确的。同样事实的两条记录的不一致，是缺少完整性的例子。
15.菜单驱动界面:		同表格驱动界面
16.多用户系统:			相对于但用户系统。可以同时有多个用户访问数据库系统。
17.联机应用程序:		允许最终用户通过联机工作站或终端访问数据库。
18.持久数据:			数据库中的数据通常被认为是持久存储的。一旦数据进入数据库被DBMS接受，就只有向DBMS提出某些明确的请求时，才能从数据库中删除数据。
19.属性:				实体具有属性，这些属性记录实体的相应信息。
20.查询语言:			数据库请求指令
21.冗余:				多余的重复的数据
22.安全性:				确保访问数据库的唯一方式时通过正确的通道。
23.共享:				不同的用户可以同时访问
24.存储字段:			存储数据的最小单元	
25.存储文件:			由现存的一种类型的存储记录的值组成。	
26.事务:				逻辑工作单元，包括一些数据库操作。

体系结构（ANSI/SPARC体系结构）:
	内模式：数据的物理存储方式。(雇员长度20字节。名称为STORED_EMP的存储记录类型来表示。STORED_EMP包含四个字段：6字节前缀（大概包含如标记或指针这样的控制信息），和相应于雇员的三个属性的三个数据字段。) 
	外模式：用户看到的数据视图。(每个雇员由一条包含两个字段的PL/I记录来表示。)
	概念模式：包含对现实世界数据库的抽象表示。(数据库包含了EMPLOYEE的实体类型信息。每个雇员都有EMPLOYEE_NUMBER(6个字符),..)

关系系统中三级体系结构的情况:
	首先，关系系统的概念模式一定是关系的。在该层可见的实体是关系的表和关系的操作符。
	第二，外部视图也是关系的或接近关系的。
	第三，内模式不是关系的，因为该层的实体不是关系表的原样照搬。事实上，关系模型与内模式无关。内部视图与物理层仍然不同，因为它并不涉及物理记录的形式。

数据定义语言（DDL）
数据操纵语言（DML）

数据字典：
	字典是“数据的数据”－－即系统中其它实体的定义，而不止是“原始数据”。

分布式处理：
	通过通信网络的连接，使一个数据处理任务可以分散到网络中的不同机器上分别进行处理。

后端（服务器）为客户提供计算服务
前段（客户）与客户交互
概念数据定义语言：用来写概念模式的语言。
概念模式：各种概念记录类型的定义。
概念视图：表示数据库的全部信息内容。由许多概念记录类型的值构成。
主语言：提供各种非数据库的功能。

载入：从一个或多个操作系统文件创建初始化数据库版本
概念模式／内模式映像：定义了概念视图和存储的数据库的对应关系。它说明了概念记录和字段在内部层次怎样表示。
数据定义语言：支持对数据库对象的定义或说明。
数据操纵语言：支持对这些对象的操作和处理。
数据字典：字典是数据的数据，即系统中其它实体的定义，而不止是原始数据。
数据子语言：数据库对象和操作的整个语言的一个字集。
数据库／数据通信系统：
分布式数据库：客户机可以同时访问许多服务器，即一个数据库请求可以将几个不同数据库的数据结合起来。
分布式处理：通过通信网络的连接，使一个数据处理任务可以分散到网络中的不同机器上分别进行处理。
外部数据定义语言：
外模式：包括外部视图中的各种外部记录类型的基本定义。单个用户的数据视图。
外部视图：特定用户所看到的数据库的内容，包括许多外部记录类型的值。通过外模式来定义。
外模式／概念模式映像：定义了特定的外部视图和概念视图之间的对应关系。
数据库的逻辑设计：又称概念设计。确定对企业有用的实体和实体的相关信息这一过程。
内部数据定义语言：定义内模式
内模式：数据的物理存储方式。
内部视图：整个数据库的底层表示，由许多内部记录型中每一类型的许多值组成。
数据库的物理设计：决定数据库中数据表示的问题这一过程
计划请求：在请求执行前就能预见到有关的需求。
非计划请求：需求是不可预知的，是一种特殊查询。
重组织：由于各种原因要重新组织数据库中的数据－例如，将磁盘上的数据聚集起来，或回收废弃数据所占用的空间。
存储结构定义：内模式
卸载／重载：卸载数据库或其一部分，备份数据库，并从这些备份的拷贝中重新装入数据。
用户接口：系统的边界，外模式。
工具：厂商提供的应用程序，基本目的是支持创建和执行其它应用程序。
检索一个特定外部记录值的过程：从几个概念记录值得到字段，而每个概念记录值反过来又需要来自几个存储记录值的字段。概念上，首先检索所有要求的存储记录的值，然后构造所要求的概念记录值，接着再构造所要求的外部记录值。
DBMS功能：数据定义。数据操纵。DML请求可以是计划的，或非计划的。优化和执行。数据安全性和完整性。数据恢复和并发。数据字典。性能。
文件管理器和DBMS相比：文件管理器并不了解记录的内部结构，不能处理与结构相关的请求。一般很少提供或根本不支持恢复和并发控制。在文件管理层没有真正的数据字典概念。提供很少的数据独立性。文件一般不像数据库那样具有统一性或共享性。
元数据：字典。系统中其它实体的定义。

关系系统：
1)结构化方面：数据库中的数据对用户来说是表，并且只是表。
2)完整性方面：数据库中的表满足一定的完整性约束。
3)操纵性方面：用户可以使用用于表操作的操作符。

选择操作是从表中提取特定的几行。
投影操作是从表中提取特定的几列。
连接操作是根据某一列的值将两个表连接起来。

三种操作的每个结果都是一个表。这是关系系统的闭包特性。
因为任何操作的输出和输入的对象种类相同，所以一个操作的输出能变成另一个的输入。

操作是一次一集合，而不是一次一行。也就是说，操作数和结果是完整的表，而不只是单行，是包含行集的表。

关系数据库是一个用表来表示数据的数据库。为什么称这样的数据库是关系的？“关系”只是表的数学术语。

目前可以说“元组”这个词近似地对应一行地概念（就像“关系”这个词近似地对应一个表地概念）

关系变量相对于关系来说其实说的是相同的东西。只不过关系变量是在另外一个层面上（数据字典）的表述。

基本关系变量是“真实存在”，意味着它们所表示的数据真正存在于数据库中。
视图并不“真实存在”，只是提供了观察“真实数据”的各种方式。

事务：事务是一个逻辑工作单元，通常包括几个数据库操作。
注意问题：
1).要保证事务的原子性。即使系统在处理中发生故障，也要保证事务中的操作要么都做，要么都不做。
2).要保证事务的持续性。一旦事务成功地执行了COMMIT,即使随后系统发生故障，也要确保它的更新写入数据库中。
3).要保证事务的隔离性。事务T1对数据库的更新操作对任何不同的事务T2来说是不可见的。
4).要保证一组并发事务的交叉执行是可串行的。其结果与按某一未指明的次序串行地执行时的结果相同。 

视图：由许多值组成

一个域就是一个数据类型。
类型：相关类型的所有值的集合。

表和关系的不同点：
1.没有重复的元组。
2.元组从上而下的排列没有次序。
3.属性从左至右的排列没有次序。
4.每个元组只包含每个属性的一个值。

数据模型有三个基本部分：数据结构，数据完整性，数据操作。

数据操作：关系代数，关系演算。

关系并操作。重复得元组按照定义被删除掉。其它涉及到删除重复元组的操作只有投影。

θ连接操作。比较而不是相等操作符的基础上连接两个关系。

关系演算和关系代数都只是一个实现关系操作的理论基础。指导如何具体实现操作。

自由变量是指在表达式中，某些明确的代换可以在其中发生，而对原来的表达式不产生影响。
约束变量：在复合命题的其它地方再次使用同一个字母可能导致冲突。例：存在x使得x=1.x是约束变量。不能只替换其中一个命题的变量x。

关系演算：元组演算，域演算。
关系代数，关系演算 都是对关系的操作，从给定的关系得到想要的关系。
元组演算：对元组进行选择。
域演算：直接对属性进行选择。

完整性：数据的正确性和相容性。
完整性约束：类型（域）约束，属性约束，关系变量约束，数据库约束


