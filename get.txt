
当你制作一个功能时，最好是理清该功能的核心概念和需求，然后去实现他们，功能要模块化，核心概念之间应该是概念一致的，联系紧密的。
不要因为功能的实现问题而将一个非该功能核心概念的东西加进来，反之应该把这些东西抽象化作为用户可配置的形式。
除了系统最核心的功能，其他东西都暴露给用户，使其可配置可扩展。

一个模块一次只添加一个功能。添加的功能最好与所有其它功能独立。只写最简单的实现。使用最少的代码实现最简单的功能。只有简单的功能才有更大的可能性被复用而又不会产生不利的影响。

抽象是一个很有用的东西。当你把具体东西抽象出来之后，你可以对抽象概念进行操作（比如符号）而不用考虑具体的东西。对抽象概念进行操作的结果就是具体东西的结果。这就是很有用的地方。比如把一个行为抽象出来成为一个符号。那个符号就具有那个行为所具有的所有特性。而具体事物也抽象出来成为一个符号表示。于是。具体事物之间的相互行为可以抽象成符号之间的运算。

所谓的理论也就是对一些特性的描述综合整理。再抽象出来。再应用于实际。
而学习一个理论最有效的办法。就是自己去证明一遍。

关于学习：
1.首先需要学习的是思想，其次才是内容。

关于功能：
1.我想一个功能的实现只是很简单的一个步骤，而一个功能的设计则是更加困难的步骤。设计的时候需要考虑到使用和实现还有目的。

关于综合与分析：
1.在综合的过程中，如果有信息的缺失，会导致之后的分析过程无法正确进行。

关于可读性：
1.程序需要可读性，而可读性简单来讲就是能简单理解所看到的代码。这个在应用或游戏的角度来讲的话，就是每个道具都有特定的icon来区分。

方法论（笛卡尔）：
1.凡是我没有明确地认识到的东西，我决不把它当成真的接受。
2.把我所审查的每一个难题按照可能和必要的程度分成若干部分，以便一一妥为解决。
3.按次序进行我的思考，从最简单，最容易认识的对象开始，一点一点逐步上升，直到认识最复杂的对象；就连那些本来没有先后关系的东西，也给它们设定一个次序。
4.在任何情况下，都要尽量全面地考察，尽量普遍地复查，做到确信毫无遗漏。


编程语言原理(第十版)：

1.变量可以用一个属性六元组来刻画：（名字，地址，数值，类型，生存期，作用域）。

2.变量的生存期是变量绑定在某个存储地址的时间。因此变量的生存期开始于变量绑定到某个存储单元时，结束于该变量从存储单元上解除绑定时。

3.有些语言允许变量声明在语句的任何地方出现。在这些语言的一些实现中，所有在函数或方法中声明的栈动态变量，都可以在这个函数或方法开始执行时，绑定到存储空间，即使其中某些变量不是一开始就声明了。这种情况下，在声明之后变量就是可见的了，但存储空间的绑定是在函数或方法开始执行时才发生的。

4.变量的作用域是语句的一个范围，这个范围之内的变量都是可见的。如果一个变量可以在某条语句中引用，那么这个变量在该语句中就是可见的。

5.命名常量只与值绑定一次，它有助于提高程序的可读性与可靠性。例如，使用名字pi来替代常量3.1415926，就可以提高可读性。

6.命名常量的另一个重要用途是将程序参数化。

7.数据类型定义了一组数据值，以及在这些数据值上预先定义的一组操作。计算机程序通过操作数据产生结果。决定程序完成任务的难易程度的一个重要因素，是正在使用的语言中已有的数据类型与要解决的现实问题的匹配程度。

8.抽象数据类型的基本思想是分离类型的接口与该类型的数据表示和操作集。

9.引用类型的变量和指针一样，只有一个基本的重要区别：指针指向内存中的地址，而引用指向内存中的对象或值。c++引用类型的变量是一个常量指针，它总是隐式地解引用。因为c++引用类型的变量是常量，所以必须在其定义中用某个变量的地址进行初始化，初始化之后，引用类型的变量也不能设置为引用任何其他变量。隐式的解引用禁止给引用变量赋予地址值。

10.当函数改变其参数或者全局变量时，我们就说函数是有副作用的。

11.在程序中，如果任意两个值相同的表达式能够在该程序的任何地方互换，并且不影响程序的运行，这个程序就是引用透明的。

12.如果表达式的结果不是在计算了所有的操作数和运算符之后得出的，就叫做表达式的短路求值。

13.看了近一半，发现关于编程语言的讨论有很大程度上是基于现有程序猿的编码习惯，思维习惯来进行的。个人觉得，应该脱离现有的编码，思维习惯，单纯以设计出一个易读，易写，易懂的编程语言为目的，来讨论或许更好。个人认为做的每件事都应该有明确的目的，而这个目的可以不基于现况，或现实。

14.任何能够用流程图来表示的算法，都能用只包含两种控制语句的编程语言实现。其一是能在两种控制流程路径中作出选择的控制语句，其二是带有逻辑控制的循环语句。

15.break语句实际上是个受限制的goto语句。

16.编程语言含有两个基本的抽象过程－过程抽象和数据抽象。过程抽象采用子程序的形式。

17.重载子程序是指，在同一个引用环境中，一个子程序与另一个子程序具有相同的名称。范型子程序是指，能够在不同的调用中，对不同类型的数据进行操作的子程序。闭包是嵌套的子程序及其引用环境，它们允许子程序从程序的任何位置调用。

18.按名字传递是输入输出参数的一种传递方法，它不对应单个的实现模型。实际上，参数按名字传递时，实参会替换子程序里所有相应的形参。按名字传递的形参在调用子程序时绑定到一个访问方法上，而到值或地址的实际绑定缺推迟到引用形参或给形参赋值的时候。汇编语言的宏指令在编译时用到了它。

19.闭包就是一个子程序和定义它的引用环境。

20.当主程序调用链接器时，它的第一个任务就是查找包含该程序引用的已翻译子程序的文件，并将它们载入内存。然后，链接器必须把主程序里调用子程序的目标地址设置成那些子程序的入口地址。

21.把类型的声明与其操作封装到一个语法单元中的主要优点在于，它可以将一个程序组织成能单独编译的逻辑单元。

22.软件执行时的并发在四个不同层次上：指令级，语句级，单元级和程序级。

23.开发并发软件的目的是生成可伸缩，可移植的并发算法。
