
数据类型:number,string,boolean,function,table,userdata,thread,nil
#运算符取表最大数值键		len = #{a = 1}

function:
	定义：以关键字function定义，关键字end结束
	function add(a,b)
		return a+b
		end

局部变量：用关键字local定义。没有local，即使在函数内部定义的变量也是全局变量。

简单对象的实现：
	function createFoo(name)
		local obj = {name = name}
		function obj:SetName(name)
			self.name = name
		end
		function obj:GetName()
			return self.name
		end
	end

	o = createFoo("Sam")
	print("name:", o:GetName())

	o:SetName("Lucy")
	print("name:", o:GetName())

成员方法的定义:
	function obj:method(a,..)... end 等价于 
	function obj.method(self, a, ...)...end 等价于
	obj.method = function(self, a, ...) ... end

成员方法的调用：
	obj:method(a1,...) 等价于 obj.method(obj, a1, ...)

Upvalue:
	一个函数所使用的定义在它的函数体之外的局部变量称为这个函数的upvalue。

函数闭包:
	一个函数和它所有upvalue构成一个函数闭包。

lua函数闭包和c函数比较
	与带静态局部变量的c函数相似。前者可以有若干实例。每个实例有自己的状态。后者只是一个静态地址。

基于对象的编程：
	实现：把需要隐藏的成员放在一张表里，把该表作为公有成员函数的upvalue。再把所有的共有成员放在另一张表里，把这张表作为对象。

元表：
	t = {}
	t2 = {a = "and", b = "Li Lei", c = "Han Meimei"}
	m = {__index = t2}
	setmetatable(t, m) -- 设表m为表t的元表
	元表本身只是一张普通的表，一般带有一些特殊的事件回调函数，通过setmetatable被设置到某个对象上进而影响这个对象的行为。简单说就是修改成员。获取成员的时候只有设置表的__index为它自己，才能索引到。

基于原型的继承：
	Robot = {name = "Sam", id = 001}
	function Rotot:New(extension)
		local t = setmetatable(extension or {}, sel)
		self.__index = self
		return t
	end

	FootballRobot = Robot:New({position = "right back"})

	fr = FootballRobot:New()
	fr:GetName()  -- Sam

函数环境：
	function foo()
		print(g or "'g' is not defined!'")
	end

	foo()
	
	env = {g = 100, print = print}
	setfenv(foo, env)
	函数环境就是一个函数在运行时所能访问的"全局"变量的集合。

模块：(< 5.1)
	module('hello', package.seeall)
	ver = "version 0.1"
	funtion hello()
		print("Hello!")
	end

	require "hello"

	print (hello.ver)

	一般在一个Lua文件内以module调用开始定义一个模块。module调用同时为这个lua文件定义一个新的函数环境（初试为空表）。lua解释器把一个lua文件的内容当作一个匿名函数体来处理。package.seeall使全局变量在此模块中可见。
	用require来导入一个模块

迭代：
	function enum(array)
		local index = 1
		return function()
			local ret = array[index]
			index = index + 1
			return ret
		end
	end

	function foreach(array, action)
		for element in enum(array) do
			action(element)
		end
	end

	foreach({1,2,3}, print)

协作线程：
	coroutine.create	-- 创建控制器。
	coroutine.resume	-- 返回上一个yield传入的参数
	coroutine.yield		-- 返回上一个resume传入的参数
	coroutine.running	--
	coroutine.status	--
	coroutine.wrap		-- 
